// Code generated by go-bindata. DO NOT EDIT. @generated
// sources:
// api/schema/project.json
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaProjectJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x4d\x6f\xdb\x38\x10\xbd\xe7\x57\xcc\x6a\x17\x70\xb2\x6b\x59\xce\xc7\xf6\xc3\x97\x20\x6d\x80\xc2\x40\x0a\xf8\xd0\x53\x5d\x1f\x68\x71\x24\x31\xa5\x48\x86\xa4\xda\x3a\x81\xff\x7b\x41\x49\x76\x25\x59\xaa\x94\xa4\x28\xd0\x8b\x0c\x0e\xdf\x8c\xf8\xe6\x3d\x8e\xf5\x70\x04\x00\xe0\xfd\x63\xc2\x04\x53\xe2\xcd\xc0\x4b\xac\x55\xb3\x20\xb8\x35\x52\xf8\x45\x74\x22\x75\x1c\x50\x4d\x22\xeb\x4f\x5f\x06\x45\xec\x6f\x6f\x5c\x66\x32\x5a\xc9\x8a\x99\xbd\xcf\xd4\x24\x94\x69\xf0\xe5\xb4\x84\x06\x71\xa8\x02\xa5\xe5\x2d\x86\x76\xe2\xca\xee\x52\x29\x9a\x50\x33\x65\x99\x14\xae\xc4\x3b\x29\x63\x8e\xf0\x96\xcb\x8c\xc2\x82\x13\x1b\x49\x9d\x42\x99\x08\x1a\x8d\xcc\x74\x88\x60\x14\x86\x2c\x62\x21\x71\x79\x93\x5d\x2d\xbb\x51\xe8\x8a\xc8\xb5\x43\xef\xa2\x84\x52\xe6\x60\x84\x2f\xb4\x54\xa8\x2d\x43\xe3\xcd\x20\x22\xdc\x60\x09\xd1\x78\x97\x31\x8d\x8e\xc4\x32\x8f\xe4\x51\x46\xcb\x12\xf9\x4a\x90\x14\xbd\x7c\xb9\x2a\xb3\x54\xb5\xdc\x43\x2d\xaf\xba\x6e\xa3\xf9\x21\x41\xc8\x04\xbb\xcb\x70\x0c\x99\x41\xed\x13\x63\x58\x2c\x90\xc2\xfc\x1a\x64\x04\x36\xc1\x1d\xe9\x49\xe5\x10\x35\x96\xc6\x6a\x26\xe2\xe6\x6e\xca\xc4\x0d\x8a\xd8\x26\xde\x0c\x5e\x34\xf7\xc8\xb7\xfd\xde\xf9\xb4\xb1\xa9\x88\xb5\xa8\xf3\xd3\x2d\x89\x7f\xbf\x72\x8f\xa9\xff\xda\x5f\x3d\x5c\x8c\xcf\x5e\x6d\xcb\xe5\xca\xdb\x67\x6d\x9b\xcd\x19\x44\xba\x46\x96\x32\xa3\x38\xd9\x80\x4b\xff\x75\xb4\x2f\x9e\x41\xfb\xca\xff\xe8\x48\x8f\x3e\x79\xf0\x97\x63\x7e\x3e\xdd\xb6\x33\xe6\x64\x8d\xdc\x0c\xe2\x5c\x40\x81\x18\x23\x43\x46\x2c\x52\xf8\xca\x6c\x02\x36\x61\xa6\x97\x6d\xcd\xca\xfb\xdd\x7e\x4b\x57\xc9\xd7\x30\x67\xff\x37\x5d\xd1\x61\xe3\x66\x87\x16\x3f\x87\xe5\xd0\xdc\x38\xc7\x4b\xbf\xf4\xca\xbf\x3b\xd3\x9c\x5c\x76\xe6\x40\xaf\xb6\x5d\x72\x1d\x77\xbf\xed\xe4\xd2\x6b\x2d\xb1\x3d\x88\xd6\x23\xdb\x56\xa9\xd7\x8c\x73\x26\xe2\xab\x30\x94\x99\xb0\xbd\x92\xbf\x29\xe0\x40\x0a\x7c\xd5\xd4\x60\x12\x99\x71\x0a\x6b\x04\xce\xc4\x67\xa4\x60\xe5\x23\x8d\x5e\x69\x40\xfd\x5c\x26\x58\xfa\x85\x7b\x57\xff\xb5\x5b\x56\x11\x8d\x03\xce\xef\x2c\x5b\x40\x21\x92\x9c\xa2\x0e\xa4\x8e\x89\x60\xf7\xf9\xb0\x1d\x7a\x4d\x9f\x6d\xdc\xea\x4c\x2e\xaa\x8e\xdd\x64\x5d\x3d\xd2\xbd\xe5\x79\x3a\x0c\xdb\xa4\xbe\x51\xf9\x1c\x2a\xe9\x5b\xf9\xe3\xd2\xd6\x64\x74\xf7\x77\x02\xef\x33\x63\x9d\x94\xa3\x6a\x7f\x46\x20\x35\x8c\x8a\xc6\x8d\x9a\xdd\x19\xa6\xf1\x1e\x85\x22\x4b\x73\xfa\xd5\x17\x78\x63\xaf\xa8\xee\xad\x0e\xdd\x7c\x58\xa8\xed\xdf\xa8\x8b\xfe\xa2\x5b\xf5\xf9\xf5\x33\xb9\x54\x07\xf4\xe9\x93\xae\x21\x51\xac\x7f\xde\xde\x30\x63\x9d\x82\x57\x8b\xb9\x71\xfa\xa1\x20\x6b\x8e\x01\x65\xc6\xfd\x42\x24\xf5\xef\x71\x6f\x9f\x2d\x8b\x73\x0d\x97\xa6\x9d\x57\x1f\x9f\x03\x5e\x44\x6b\xb2\xe9\x02\x31\x8b\x69\xf7\x70\x87\xc7\x0d\xea\xe2\xeb\x66\x5e\x96\xb4\x3a\xc3\xa1\x13\xb9\xc5\xc3\xa5\x7c\x4f\x6f\xd7\x40\xfd\x0f\x78\xfe\x09\xfd\xea\xba\x3a\x47\xc5\x73\x7b\xf4\x3d\x00\x00\xff\xff\xae\x4d\x4f\xb4\xdf\x0b\x00\x00")

func schemaProjectJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaProjectJson,
		"schema/project.json",
	)
}

func schemaProjectJson() (*asset, error) {
	bytes, err := schemaProjectJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/project.json", size: 3039, mode: os.FileMode(436), modTime: time.Unix(1535961391, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/project.json": schemaProjectJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema": &bintree{nil, map[string]*bintree{
		"project.json": &bintree{schemaProjectJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
